name: switchtec-user rpm

on: push

env:
  STARTS_WITH_RELEASES: 'refs/heads/releases/nnf'
  SWITCHTEC_LIB_PKG: https://github.com/NearNodeFlash/switchtec-user-rpmexp-43/releases/download/4.2-rc1_29HPE/switchtec-4.2.rc1_29HPE-1.el8.x86_64.rpm

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    container:
      image: centos:8
      options: --cpus 1

    steps:
      - name: "Verify context"
        run: |
          echo "ref is ${{ github.ref }}"
          echo "ref_type is ${{ github.ref_type }}"
          echo "event_type is ${{ github.event.event_type }}"

      - name: centos is EOL so muck with it
        run: |
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*
      - name: install tools
        # The "Development Tools" group satisfies everything, but it's a big
        # hammer.
        #   run: dnf -y groupinstall "Development Tools"
        #
        # So let's cherry-pick:
        run: dnf install -y rpm-build rpmdevtools rpmlint make gcc git ncurses-devel openssl-devel libuuid-devel systemd-devel
      - name: personalize rpmlint
        # suppress one error: we want to allow zero-length files.
        run: |
          mkdir ~/.config
          echo 'addFilter("zero-length")' > ~/.config/rpmlint

      - name: add libswitchtec
        run: dnf --verbose install -y ${{ env.SWITCHTEC_LIB_PKG }}

      - name: checkout
        uses: actions/checkout@v3
        with:
          # Because we need the tags to build the version ID.
          fetch-depth: 0

      - name: generate the version ID
        # The NVME-VERSION-GEN tool can generate a version ID that includes the
        # nearest tag, the number of commits since that tag, the short hash of
        # the latest commit, and whether or not the workarea is dirty.
        #
        # The version ID will look like this, with the "-dirty" suffix removed:
        #   The normal version used by most pieces:
        #      0.5.53.g0e90
        #   The dash-dotted version needed by Github for tagging releases:
        #      0.5-53-g0e90
        run: |
          ./NVME-VERSION-GEN
          echo "--- NVME-VERSION-FILE begin"
          cat NVME-VERSION-FILE
          echo "--- NVME-VERSION-FILE end"

          echo "release_tag=$(grep -E '^RELEASE_TAG =' NVME-VERSION-FILE | awk '{print $3}')" >> $GITHUB_ENV
          grep -E '^NVME_VERSION =' NVME-VERSION-FILE | awk '{print $3}' > version
          echo "versionDotted=$(<version)" >> $GITHUB_ENV
          echo "versionDashed=$(sed 's/\./-/g' version)" >> $GITHUB_ENV

      - name: make source tarball
        run: make dist
      - name: view source artifacts
        run: /bin/ls -al *.gz *.spec
      - name: look at version files
        run: |
           cat NVME-VERSION-FILE
           echo ---
           cat version
      - name: view the spec file
        run: cat *.spec
      - name: lint the spec file
        run: rpmlint ./switchtec-nvme.spec

      - name: create the rpmbuild dir structure
        run: rpmdev-setuptree
      - name: populate the rpmbuild dir structure
        run: |
          cp switchtec-nvme*.gz $HOME/rpmbuild/SOURCES
          cp switchtec-nvme.spec $HOME/rpmbuild/SPECS
      - name: build the rpm
        run: rpmbuild -ba switchtec-nvme.spec

      - name: collect the artifacts
        # ...but not the debug rpms
        run: |
          mkdir /tmp/artifacts
          cp $HOME/rpmbuild/SRPMS/switchtec-nvme-*.src.rpm /tmp/artifacts
          cp $HOME/rpmbuild/RPMS/x86_64/switchtec-nvme-*.rpm /tmp/artifacts
          rm /tmp/artifacts/switchtec-nvme-debug*
          /bin/ls -al /tmp/artifacts
      - name: lint the rpm files
        run: rpmlint /tmp/artifacts/*.rpm

      - name: save the per-build artifacts
        # These can be found by navigating to the repo's "Actions" page and
        # and finding this workflow's artifacts there.
        uses: actions/upload-artifact@v3
        with:
          name: switchtec-nvme-${{ env.versionDashed }}
          if-no-files-found: error
          retention-days: 5
          path: /tmp/artifacts/*

      - name: apply tag for release
        # If we don't tag it, then GitHub will report an error when we try
        # to make a release in the next step.
        if: ${{ startsWith(github.ref, env.STARTS_WITH_RELEASES) }}
        uses: tvdias/github-tagger@v0.0.1
        with:
          tag: ${{ env.release_tag }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: upload the release assets
        # These can be found by going to the repo's "Releases" page.
        if: ${{ startsWith(github.ref, env.STARTS_WITH_RELEASES) }}
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.versionDotted }}
          tag_name: ${{ env.release_tag }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: /tmp/artifacts/*

